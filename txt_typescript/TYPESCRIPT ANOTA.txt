typescript

criada pasta,
- criar um gitignore (gitignore.io) buscar node, copiar tudo
- incluir no .gitignore
- npm init -y (criar o projeto node)

- instalar typescript de forma local (npm i typescript -D)
 (detalhe, cria arquivos tsc e tsc server no .bin em node_modules)
- criado arquivo index.ts com uma funcao simples greet
(agora code runner nao funciona, depois configurar o ts node e rodar em tempo real

Para Compilar,
npx tsc index.ts  (cria o js)

typescript tem 2 modos de operação,
modual mode (ts), (modulos) (--precisa um export default para não ter erro de duplicidade)
script mode
- aula,
instalando ts-node e code runner***
compilar
- pra usar code runner. INSTALLAR nos dev dependencies
- npm i ts-node -D
- testar, funcionando o play, para rodar com ts-node
- CRiar pasta .vscode na pasta raiz + criar arquivo settings.json
settings referentes a este projeto ,  configurar o code runner executor Map
- manter apenas configuração do typescript, deletar o resto
usar npx (local) e incluir --file ("typescript": "npx ts-node --files",)
(que vai usar include exclude do ts-config.json

- aula,
ESLINT-
npm i eslint -D
npm i @typescript-eslint/eslint-plugin @typescript-eslint/parser -D
criar arquivo .eslintrc.js

copiar do repositorio e incluir no arquivo. .eslintrc.js
- instalar prettier ,
configuracoes ts config, , editor config , .vscode config

TYPESCRIPT



{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2016"],
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "module": "commonjs",
    "rootDir": "./",
    "types": ["jest", "node"],
    "typeRoots": [
      "@types",
      "./node_modules/@types"
    ],
    "resolveJsonModule": true,
    "allowJs": true,
    "outDir": "dist",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitAny": true,
    "strictPropertyInitialization": false,
    "skipLibCheck": true,
    "sourceMap": true
  },
}
